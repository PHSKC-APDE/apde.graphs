---
title: "Choropleth Maps"
format: gfm
prefer-html: true
self-contained: false
editor: visual
knitr:
  opts_chunk:
    comment: ""
df-print: kable
---

This is a step-by-step guide to building a choropleth map using `ggplot2`. While you would typically write all components in a single code block using `+` to connect elements, we hope splitting the code will illustrate how each snippet contributes to the final visualization.

***Note!*** [`tmap`](https://r-tmap.github.io/tmap/) is sometimes used for static maps, but we demonstrate `ggplot2` for consistency with the other guides in this package. If you are interested in creating dynamic maps, we suggest starting with [`mapview`](https://r-spatial.github.io/mapview/).

## Load libraries

```{r setup}
#| echo: true
#| output: false
library(ggplot2)
library(apde.graphs)
library(sf)
```

## Import & preview data

### 2022 ACS PUMS Estimates of Foreign Born Residents of King County - by PUMAs

```{r import_foreignborn}
foreignborn <- apde.graphs::foreignbornDT
head(foreignborn)
```

### Public Use Microdata Areas (PUMAs)

```{r import_data}
pumas <- apde.graphs::shapePUMA20
plot(pumas)
```

## Merge your estimates onto the shapefile

```{r merge_estimates}
pumas <- merge(pumas, foreignborn, by = 'PUMACE20', all = T)
head(pumas)
```

## Create initial map

Start with a basic map using default colors.

```{r initial_plot}
mymap <- ggplot(data = pumas) +
  geom_sf(aes(fill = mean), 
          color = '#333333') # border color is from Tableau Style Guide 
```

```{r display_initial}
#| fig-width: 11 
#| fig-height: 8.5
#| dpi: 150
#| echo: false
#| warning: false
mymap
```

## Format legend as percentages

Convert the legend values to percentages and adjust breaks for readability.

```{r format_legend}
mymap <- mymap +
  scale_fill_continuous(labels = scales::percent_format(accuracy = 1),
                       breaks = seq(0, 1, by = 0.1))
```

```{r display_with_formatted_legend}
#| fig-width: 11 
#| fig-height: 8.5
#| dpi: 150
#| echo: false
#| warning: false
mymap
```

## Add APDE's diverging color scheme

While not appropriate for this neutral indicator, here is the [Tableau Style Guide's](https://kc1.sharepoint.com/:w:/r/teams/DPH-TableauResources/_layouts/15/Doc.aspx?sourcedoc=%7B359811A5-92B0-4B13-B6DC-DD71CDBBA11B%7D&file=Tableau%20Style%20Guide%20v1.0.4.docx&action=default&mobileredirect=true) recommended diverging color scheme for reference.

```{r diverging_colors}
#| message: false
mymap_diverging <- mymap +
  scale_fill_gradientn(
    colors = c("#d73027", "#f46d43", "#fdae61", "#fee090", "#ffffbf",
               "#e0f3f8", "#abd9e9", "#74add1", "#4575b4")
  )
```

```{r display_diverging}
#| fig-width: 11 
#| fig-height: 8.5
#| dpi: 150
#| echo: false
#| warning: false
mymap_diverging
```

## Add APDE's neutral color scheme

Since foreign-born population is a neutral indicator, we use the [Tableau Style Guide's](https://kc1.sharepoint.com/:w:/r/teams/DPH-TableauResources/_layouts/15/Doc.aspx?sourcedoc=%7B359811A5-92B0-4B13-B6DC-DD71CDBBA11B%7D&file=Tableau%20Style%20Guide%20v1.0.4.docx&action=default&mobileredirect=true) sequential color scheme.

```{r neutral_colors}
#| message: false
mymap <- mymap +
  scale_fill_gradientn(
    colors = c("#f7fcfd", "#e0ecf4", "#bfd3e6", "#9ebcda", "#8c96c6",
               "#8c6bb1", "#88419d", "#810f7c", "#4d004b")
  )
```

```{r display_neutral}
#| fig-width: 11 
#| fig-height: 8.5
#| dpi: 150
#| echo: false
#| warning: false
mymap
```

## Add titles and format legend

```{r add_titles}
mymap <- mymap +
  labs(title = "Percentage of Foreign Born Residents by PUMA",
       subtitle = "King County, 2022",
       x = "", # no x-axis title
       y = "", # no y-axis title
       fill = "Foreign Born (%)") # legend title
```

```{r display_with_titles}
#| fig-width: 11 
#| fig-height: 8.5
#| dpi: 150
#| echo: false
#| warning: false
mymap
```

## Add APDE customizations

The `apde_caption()` and `apde_theme()` elements are from the `apde.graphs` package, not `ggplot2`.

```{r add_theme}
#| message: false
mymap <- mymap +
  apde_theme() +
  apde_caption(data_source = "2022 American Community Survey PUMS data")
```

```{r display_with_theme}
#| fig-width: 11 
#| fig-height: 8.5
#| dpi: 150
#| echo: false
#| warning: false
mymap
```

## Tweak default theme

Remove grid lines and adjust margins for a cleaner map display.

```{r adjust_theme}
mymap <- mymap +
  theme(
    panel.grid = element_blank(),
    axis.text = element_blank()
  )
```

```{r display_adjusted_theme}
#| fig-width: 11 
#| fig-height: 8.5
#| dpi: 150
#| echo: false
#| warning: false
mymap
```

## Add 'Big City' labels

Add city names to their centroids to help orient map users.

```{r add_cities}
# Import centroids for 'Big Cities'
centroids <- apde.graphs::shapeBigCities_centroids

# Add city labels to map
mymap <- mymap +
    geom_sf_label(data = centroids,
                aes(label = NAME),                    # label values
                size = 3,                             # font size
                fontface = "bold",                    # font style
                color = "#333333",                    # font color
                fill = "white",                       # background color
                alpha = 0.7,                          # transparency for the background
                label.padding = unit(0.15, "lines"))  # Padding around text
```

```{r display_with_cities}
#| fig-width: 11 
#| fig-height: 8.5
#| dpi: 150
#| echo: false
#| warning: false
mymap
```

## Save the plot

`ggsave()` automatically detects file type from filename extension (.jpg, .png, .pdf, etc.).

```{r save_plot}
#| echo: true
#| output: false
#| eval: false

ggsave('foreign_born_map.jpg',
       mymap,
       width = 11,
       height = 8.5,
       dpi = 600,
       units = 'in')
```
