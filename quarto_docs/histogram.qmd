---
title: "Histograms"
format: gfm
prefer-html: true
self-contained: false
editor: visual
knitr:
  opts_chunk:
    comment: ""
df-print: kable
---

This is a step-by-step guide to building histograms using both base R's `hist()` function and `ggplot2`. While `ggplot2` is preferred for publication-quality graphics, base R's `hist()` function is often sufficient for quick data exploration. For the `ggplot2` portion, you would typically write all components in a single code block using `+` to connect elements, but we hope splitting the code will illustrate how each snippet contributes to the final visualization.

## Load libraries

```{r setup}
#| echo: true
#| output: false
library(ggplot2)
library(data.table)
library(apde.graphs)
```

## Import & preview data

```{r import_data}
dt <- apde.graphs::lifespanDT_raw
head(dt)
```

## Quick data exploration with base R

Base R's `hist()` function provides a quick way to examine distributions.

### Basic histogram

```{r basic_hist}
hist(dt$lifespan)
```

### Customized base R histogram

Add some basic customization to improve readability.

```{r custom_hist}
hist(dt$lifespan,
     main = "Distribution of Lifespans in Ancient Cities",
     xlab = "Age (years)",
     ylab = "Frequency",
     breaks = 30,          # number of bins
     col = "#1B9E77",      # bar color
     border = "white")     # border color
```

## Create initial ggplot2 histogram

Now let's create a more polished histogram using `ggplot2`.

```{r initial_plot}
myplot <- ggplot(dt, aes(x = lifespan)) +
  geom_histogram()  
```

```{r display_initial}
#| fig-width: 11 
#| fig-height: 8.5
#| dpi: 150
#| echo: false
#| warning: false
myplot
```

## Define bins and colors

Add the number of desired bins and custom colors to the bars and borders.

```{r add_colors}
myplot <- ggplot(dt, aes(x = lifespan)) +
  geom_histogram(bins = 30,       # number of bins
                fill = "#1B9E77", # bar color
                color = "white",  # border color
                alpha = 0.8)      # transparency
```

```{r display_with_colors}
#| fig-width: 11 
#| fig-height: 8.5
#| dpi: 150
#| echo: false
#| warning: false
myplot
```

::: {.note-box style="background-color: #f8f9fa; padding: 1em; border-left: 4px solid #1b9e77; margin: 1em 0;"}
<b>Why do the histograms look different?</b><br/>You may have noticed that `hist()` and `ggplot2::geom_histogram()` produced histograms with slightly different shapes -- despite instructing both to use 30 bins. The difference occurs because these functions use different methods for calculating bin widths. Base R's `hist()` function uses a method called Sturges' formula to suggest bin widths and adjusts the bin edges to "pretty" values (like whole numbers). This can result in slightly uneven bin widths. In contrast, `ggplot2::geom_histogram()` divides the data range into exactly the specified number of equal-width bins, leading to consistent bin widths.
:::

## Format axes

Add custom axis labels and adjust the scale.

```{r format_axes}
myplot <- myplot +
  labs(title = "Distribution of Lifespans in Ancient Cities",
       x = "Age (years)",
       y = "Count") +
  scale_x_continuous(breaks = seq(0, 100, by = 10))  # x-axis breaks every 10 years
```

```{r display_with_axes}
#| fig-width: 11 
#| fig-height: 8.5
#| dpi: 150
#| echo: false
#| warning: false
myplot
```

## Add APDE customizations

The `apde_caption()` and `apde_theme()` elements are from the `apde.graphs` package, not `ggplot2`.

```{r add_theme}
#| message: false
myplot <- myplot +
  apde_theme() +
  apde_caption(data_source = "Synthetic dataset")
```

```{r display_with_theme}
#| fig-width: 11 
#| fig-height: 8.5
#| dpi: 150
#| echo: false
#| warning: false
myplot
```

## Add mean reference line

Add a vertical line for the mean lifespan.

```{r add_mean_line}
mean_lifespan <- mean(dt$lifespan)

myplot <- myplot +
  geom_vline(xintercept = mean_lifespan, # use geom_hline for horizontal lines
             linetype = "dashed",        # options: twodash, solid, longdash, dotted, dotdash, dashed, blank
             color = "#333333",          # color of line
             linewidth = 1)              # thickness of line
```

```{r display_with_mean}
#| fig-width: 11 
#| fig-height: 8.5
#| dpi: 150
#| echo: false
#| warning: false
myplot
```

## Add mean annotation

```{r add_annotation}
myplot <- myplot +
  annotate("text",
           x = mean_lifespan + 1,                          # offset text to the right of the line
           y = max(ggplot_build(myplot)$data[[1]]$count),  # place near top
           hjust = 0,                                      # left-align text
           label = paste("Mean:", round(mean_lifespan, 1), "years"))
```

```{r display_with_annotation}
#| fig-width: 11 
#| fig-height: 8.5
#| dpi: 150
#| echo: false
#| warning: false
myplot
```

## Save the plot

`ggsave()` automatically detects file type from filename extension (.jpg, .png, .pdf, etc.).

```{r save_plot}
#| echo: true
#| output: false
#| eval: false

ggsave('ancient_cities_lifespan_hist.jpg',
       myplot,
       width = 11,
       height = 8.5,
       dpi = 600,
       units = 'in')
```

-- *Created by Danny Colombara, January 8, 2025*
