---
title: "Trend Lines with Confidence Intervals"
format: gfm
prefer-html: true
self-contained: false
editor: visual
knitr:
  opts_chunk:
    comment: ""
df-print: kable
---

This is a step-by-step guide to building a [CHI](https://kingcounty.gov/chi) style trend line graph using `ggplot2`. While you would typically write all components in a single code block using `+` to connect elements, we hope splitting the code will illustrate how each snippet contributes to the final visualization.

## Load libraries

```{r setup}
#| echo: true
#| output: false
library(ggplot2)
library(data.table)
library(apde.graphs)
```

## Import & preview data

The breastfedDT dataset is a semi-synthetic dataset included in the apde.graphs package for demonstration purposes.

```{r import_data}
dt <- apde.graphs::breastfedDT
dt <- dt[tab == 'trends' & cat1 == 'Race/ethnicity']
head(dt)
```

## Create initial line plot

Start with basic trend lines for each racial/ethnic group.

```{r initial_plot}
myplot <- ggplot(dt,
                 aes(x = year,
                     y = result,
                     color = cat1_group,
                     group = cat1_group)) +
  geom_line()
```

```{r display_initial}
#| fig-width: 11 
#| fig-height: 8.5
#| dpi: 150
#| echo: false
#| warning: false
myplot
```

## Add points for data values

Add points to show exact data values along the trend lines.

```{r add_points}
myplot <- myplot +
  geom_point(size = 2)
```

```{r display_with_points}
#| fig-width: 11 
#| fig-height: 8.5
#| dpi: 150
#| echo: false
#| warning: false
myplot
```

## Format axes

Format y-axis as percentage and adjust axis labels. This will zoom into the relevant range of data. For true CHI standards, set `limits = c(0, 1)` and `breaks = seq(0, 1, 0.1)`.

```{r format_axes}
myplot <- myplot +
  scale_y_continuous(labels = scales::percent,      # convert decimals to percentages
                    limits = c(0.8, 1),             # limit range to 80-100%
                    breaks = seq(0.8, 1, 0.05)) +   # 5 percentage point y-axis labels
  scale_x_discrete(expand = expansion(mult = 0.02)) # 2% padding to each side of x-axis limits
```

```{r display_with_axes}
#| fig-width: 11 
#| fig-height: 8.5
#| dpi: 150
#| echo: false
#| warning: false
myplot
```

## Add confidence intervals

Add semi-transparent confidence interval ribbons.

```{r add_ci}
myplot <- myplot +
  geom_ribbon(aes(ymin = lower_bound,
                  ymax = upper_bound,
                  fill = cat1_group),
              alpha = 0.2,    # set transparency
              color = NA)     # no ribbon border
```

```{r display_with_ci}
#| fig-width: 11 
#| fig-height: 8.5
#| dpi: 150
#| echo: false
#| warning: false
myplot
```

## Custom color scheme

Define specific colors for each category using hex codes or named colors. These are based on APDE's [Tableau Style Guide](https://kc1.sharepoint.com/:w:/r/teams/DPH-TableauResources/_layouts/15/Doc.aspx?sourcedoc=%7B359811A5-92B0-4B13-B6DC-DD71CDBBA11B%7D&file=Tableau%20Style%20Guide%20v1.0.4.docx&action=default&mobileredirect=true)

```{r set_colors}
# Define color palette
race_colors <- c(
  "AIAN" = "#55AD56",      
  "Asian" = "#30BCAD",      
  "Black" = "#77559E",      
  "Hispanic" = "#C46487",   
  "Multiple" = "#8C2D04",   
  "NHPI" = "#F8B620",       
  "White" = "#2C7bb6"       
)

myplot <- myplot +
  scale_color_manual(values = race_colors) + # set colors for lines and dots
  scale_fill_manual(values = race_colors)    # set same colors for ribbons (confidence intervals)
```

```{r display_with_colors}
#| fig-width: 11 
#| fig-height: 8.5
#| dpi: 150
#| echo: false
#| warning: false
myplot
```

## Add titles and format legend

Add title and adjust legend position and labels.

```{r add_titles}
myplot <- myplot +
  labs(title = "Breastfeeding initiation (rolling averages: 2013-2022)",
       x = "",                     # no x-axis title
       y = "",                     # no y-axis title
       color = "Race/Ethnicity") + # legend title
  guides(fill = "none")            # hide ribbon legend (redundant with line color legend)
```

```{r display_with_titles}
#| fig-width: 11 
#| fig-height: 8.5
#| dpi: 150
#| echo: false
#| warning: false
myplot
```

## Default APDE theme and formatting

The `apde_caption()` and `apde_theme()` elements are from the `apde.graphs` package, not `ggplot2`.

```{r add_theme}
#| echo: true
#| output: false
myplot <- myplot +
  apde_theme() +
  apde_caption(data_source = "Synthetic dataset") 
```

```{r display_with_theme}
#| fig-width: 11 
#| fig-height: 8.5
#| dpi: 150
#| echo: false
#| warning: false
myplot
```

## Tweak default theme

Bold the x-axis labels to align with CHI standards & rotate the x-axis labels to prevent crowding.

```{r tweak_default_theme}
#| echo: true
#| output: false
myplot <- myplot +
  theme(axis.text.x = element_text(face = 'bold', angle = 90))
```

```{r display_tweak_default_theme}
#| fig-width: 11 
#| fig-height: 8.5
#| dpi: 150
#| echo: false
#| warning: false
myplot
```

## Save the plot

`ggsave()` automatically detects file type from filename extension (.jpg, .png, .pdf, etc.).

```{r save_plot}
#| echo: true
#| output: false
#| eval: false
ggsave('race_ethnicity_trends.jpg',
       myplot,
       width = 11,
       height = 8.5,
       dpi = 600,
       units = 'in')
```
